// Generated by gencpp from file datmo/TrackArray.msg
// DO NOT EDIT!


#ifndef DATMO_MESSAGE_TRACKARRAY_H
#define DATMO_MESSAGE_TRACKARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <datmo/Track.h>

namespace datmo
{
template <class ContainerAllocator>
struct TrackArray_
{
  typedef TrackArray_<ContainerAllocator> Type;

  TrackArray_()
    : tracks()  {
    }
  TrackArray_(const ContainerAllocator& _alloc)
    : tracks(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::datmo::Track_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::datmo::Track_<ContainerAllocator> >> _tracks_type;
  _tracks_type tracks;





  typedef boost::shared_ptr< ::datmo::TrackArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::datmo::TrackArray_<ContainerAllocator> const> ConstPtr;

}; // struct TrackArray_

typedef ::datmo::TrackArray_<std::allocator<void> > TrackArray;

typedef boost::shared_ptr< ::datmo::TrackArray > TrackArrayPtr;
typedef boost::shared_ptr< ::datmo::TrackArray const> TrackArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::datmo::TrackArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::datmo::TrackArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::datmo::TrackArray_<ContainerAllocator1> & lhs, const ::datmo::TrackArray_<ContainerAllocator2> & rhs)
{
  return lhs.tracks == rhs.tracks;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::datmo::TrackArray_<ContainerAllocator1> & lhs, const ::datmo::TrackArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace datmo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::datmo::TrackArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::datmo::TrackArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::datmo::TrackArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::datmo::TrackArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::datmo::TrackArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::datmo::TrackArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::datmo::TrackArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "79aeb358b396d5d5b2d7af86cb0ae16a";
  }

  static const char* value(const ::datmo::TrackArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x79aeb358b396d5d5ULL;
  static const uint64_t static_value2 = 0xb2d7af86cb0ae16aULL;
};

template<class ContainerAllocator>
struct DataType< ::datmo::TrackArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "datmo/TrackArray";
  }

  static const char* value(const ::datmo::TrackArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::datmo::TrackArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# An Array of Tracks\n"
"\n"
"Track[] tracks\n"
"\n"
"================================================================================\n"
"MSG: datmo/Track\n"
"int32 id 	               # object ID \n"
"float32 length                   # Length of the detected object\n"
"float32 width                    # Width of the detected object\n"
"nav_msgs/Odometry odom         # Pose of the object\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::datmo::TrackArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::datmo::TrackArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tracks);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::datmo::TrackArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::datmo::TrackArray_<ContainerAllocator>& v)
  {
    s << indent << "tracks[]" << std::endl;
    for (size_t i = 0; i < v.tracks.size(); ++i)
    {
      s << indent << "  tracks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::datmo::Track_<ContainerAllocator> >::stream(s, indent + "    ", v.tracks[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATMO_MESSAGE_TRACKARRAY_H
